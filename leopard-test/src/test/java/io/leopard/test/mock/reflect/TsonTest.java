/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Administrator
 * Created : 04/18/2013
 */

package io.leopard.test.mock.reflect;

import io.leopard.burrow.lang.datatype.Month;
import io.leopard.burrow.lang.datatype.OnlyDate;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Test;

public class TsonTest {

	@Test
	public void toObject() {
		User user = Tson.toObject("{username:hctan}", User.class);
		Assert.assertEquals("hctan", user.username);
	}

	@Test
	public void Tson() {
		new Tson();
	}

	@Test
	public void getNameSet() {
		Assert.assertEquals("[key, key2]", Tson.getNameSet("key:value,key2:value2").toString());
	}

	@Test
	public void parseDate() {
		Assert.assertNotNull(Tson.parseDate("now"));
		Assert.assertNotNull(Tson.parseDate("now+10s"));
		Assert.assertNotNull(Tson.parseDate("now-10s"));
		Assert.assertNotNull(Tson.parseDate("2013-01-01"));
		Assert.assertNotNull(Tson.parseDate("123456789"));
	}

	@Test
	public void parseList() {
		List<Map<String, String>> list = Tson.parseList("[key:key1,value:value1;key:key2]");
		Assert.assertEquals(2, list.size());
	}

	@Test
	public void toTime() {
		Assert.assertEquals(10000L, Tson.toTime("10000ms"));
		Assert.assertEquals(10000L, Tson.toTime("10s"));
		Assert.assertEquals(1000L * 60L, Tson.toTime("1m"));
		Assert.assertEquals(1000L * 3600L, Tson.toTime("1h"));
		Assert.assertEquals(1000L * 3600L * 24, Tson.toTime("1D"));
		try {
			Tson.toTime("ab");
			Assert.fail("怎么没有抛异常?");
		}
		catch (RuntimeException e) {

		}
	}

	@Test
	public void parse() {
		Assert.assertEquals("str", Tson.parse("str", String.class));
		Assert.assertEquals(1000L, Tson.parse("1000", Date.class).getTime());
		Assert.assertEquals("2013-01-01", Tson.parse("2013-01-01", OnlyDate.class).toString());
		Assert.assertEquals("2013-01", Tson.parse("2013-01-01", Month.class).toString());
		Assert.assertEquals(1, Tson.parse("1", Integer.class).intValue());
		Assert.assertEquals(1, Tson.parse("1", int.class).intValue());
		Assert.assertEquals(1L, Tson.parse("1", Long.class).longValue());
		Assert.assertEquals(1L, Tson.parse("1", long.class).longValue());
		Assert.assertEquals(1F, Tson.parse("1", Float.class).floatValue(), 0);
		Assert.assertEquals(1F, Tson.parse("1", float.class).floatValue(), 0);
		Assert.assertEquals(1D, Tson.parse("1", Double.class).doubleValue(), 0);
		Assert.assertEquals(1D, Tson.parse("1", double.class).doubleValue(), 0);
		Assert.assertEquals(true, Tson.parse("true", Boolean.class).booleanValue());
		Assert.assertEquals(true, Tson.parse("true", boolean.class).booleanValue());

		try {
			Tson.parse("true", Map.class);
			Assert.fail("怎么没有抛异常?");
		}
		catch (RuntimeException e) {

		}
	}

	@Test
	public void getValue() {
		Assert.assertEquals(1, (int) (Integer) Tson.getValue("1", Integer.class.getName()));
		Assert.assertEquals(1, (int) (Integer) Tson.getValue("1", int.class.getName()));
		Assert.assertEquals(1L, (long) (Long) Tson.getValue("1", Long.class.getName()));
		Assert.assertEquals(1L, (long) (Long) Tson.getValue("1", long.class.getName()));
		Assert.assertEquals(1F, (Float) Tson.getValue("1", Float.class.getName()), 0);
		Assert.assertEquals(1F, (Float) Tson.getValue("1", float.class.getName()), 0);
		Assert.assertEquals(1D, (Double) Tson.getValue("1", Double.class.getName()), 0);
		Assert.assertEquals(1D, (Double) Tson.getValue("1", double.class.getName()), 0);
		Assert.assertEquals(true, (boolean) (Boolean) Tson.getValue("true", Boolean.class.getName()));
		Assert.assertEquals(true, (boolean) (Boolean) Tson.getValue("true", boolean.class.getName()));

		Assert.assertEquals(1000L, ((Date) Tson.getValue("1000", Date.class.getName())).getTime());

		try {
			Tson.getValue("true", Map.class);
			Assert.fail("怎么没有抛异常?");
		}
		catch (RuntimeException e) {

		}
	}

	@Test
	public void getValue2() {
		Assert.assertEquals("hctan", Tson.getValue("{username:hctan,nickname:ahai}", String.class));
	}

	@Test
	public void getFieldName() {
		Assert.assertEquals("username", Tson.getFieldName("{username:hctan,nickname:ahai}"));
	}

	public static class User {
		protected String username;
	}

	@Test
	public void getFieldValue() {
		User user = new User();
		Assert.assertEquals("hctan", Tson.getFieldValue(user, "username", "hctan"));
	}

	@Test
	public void setFieldValue() {
		User user = new User();
		Tson.setFieldValue(user, "username", "hctan");
		Assert.assertEquals("hctan", user.username);
	}

	@Test
	public void parseMap() {
		Map<String, String> map = Tson.parseMap("{username:hctan,nickname:ahai}");
		Assert.assertEquals("hctan", map.get("username"));
	}

	public static enum Type {
		DEF
	}

	@Test
	public void toValue() {
		Assert.assertEquals("str", Tson.toValue("str"));
		Assert.assertEquals("1", Tson.toValue(1));
		Assert.assertEquals("1", Tson.toValue(1L));
		Assert.assertEquals("1.0", Tson.toValue(1f));
		Assert.assertEquals("1.0", Tson.toValue(1d));
		Assert.assertEquals("1", Tson.toValue(new Date(1)));
		Assert.assertEquals("2013-01-01", Tson.toValue(new OnlyDate("2013-01-01")));
		Assert.assertEquals("2013-01", Tson.toValue(new Month("2013-01-01")));
		Assert.assertEquals("true", Tson.toValue(true));
		try {
			Tson.toValue(Type.DEF);
			Assert.fail("怎么没有抛异常?");
		}
		catch (RuntimeException e) {

		}
		try {
			Tson.toValue(new HashSet<String>());
			Assert.fail("怎么没有抛异常?");
		}
		catch (RuntimeException e) {

		}
	}

	@Test
	public void toTextJson() {
		String tson = Tson.toTextJson("{username:hctan}", new String[] { "key1", "key2" }, new String[] { "value1", "value2" });
		Assert.assertEquals("{username:hctan,key1:value1,key2:value2}", tson);
		// System.out.println("tson:" + tson);
	}

	@Test
	public void toListObject() {
		List<User> userList = Tson.toListObject("[username:hctan;username:hctan2]", User.class);
		Assert.assertEquals("hctan", userList.get(0).username);
		Assert.assertEquals("hctan2", userList.get(1).username);
	}

	@Test
	public void toEntryList() {

	}
}
