/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Administrator
 * Created : 04/18/2013
 */

package io.leopard.commons.utility;

import org.junit.Assert;
import org.junit.Test;

public class NumberUtilTest {

	@Test
	public void scale() {
		Assert.assertEquals(100.1f, NumberUtil.scale(100.1011f, 2), 0);
		Assert.assertEquals(100.1d, NumberUtil.scale(100.1011d, 2), 0);

	}

	@Test
	public void format() {
		Assert.assertEquals("0.00", NumberUtil.format(0, 2));

		Assert.assertEquals("0", NumberUtil.format(0));
		Assert.assertEquals("12,345", NumberUtil.format(12345));
	}

	@Test
	public void equals() {
		Assert.assertTrue(NumberUtil.equals(1L, 1));
		Assert.assertFalse(NumberUtil.equals(1L, 2));
	}

	@Test
	public void isNull() {
		Assert.assertTrue(NumberUtil.isNull(null));
		Integer num = null;
		Assert.assertTrue(NumberUtil.isNull(num));
		Assert.assertFalse(NumberUtil.isNull(new Integer(1)));
	}

	@Test
	public void toInt() {
		Assert.assertEquals(0, NumberUtil.toInt(null));
		Assert.assertEquals(1, NumberUtil.toInt(new Long(1)));

		Assert.assertEquals(1, NumberUtil.toInt(null, 1));
		Assert.assertEquals(2, NumberUtil.toInt(new Long(2)));

		Assert.assertEquals(2, NumberUtil.toInt(new Long(2), 1));

		Assert.assertEquals(0, NumberUtil.toInt(false));
		Assert.assertEquals(1, NumberUtil.toInt(true));
	}

	// @SuppressWarnings("deprecation")
	@Test
	public void toInt2() {
		Assert.assertEquals(0, NumberUtil.toInt((String) null));
		Assert.assertEquals(1, NumberUtil.toInt("1"));
	}

	@Test
	public void toBool() {
		Assert.assertFalse(NumberUtil.toBool((Long) null));
		Assert.assertFalse(NumberUtil.toBool(new Long(0)));
		Assert.assertTrue(NumberUtil.toBool(new Long(1)));

		Assert.assertFalse(NumberUtil.toBool((Boolean) null));
		Assert.assertFalse(NumberUtil.toBool(false));
		Assert.assertTrue(NumberUtil.toBool(true));
	}

	@Test
	public void toFloat() {
		Assert.assertEquals(1.0, NumberUtil.toFloat((Float) null, 1.0f), 0);
		Assert.assertEquals(2, NumberUtil.toFloat(new Float(2), 2.0f), 0);
	}

	@Test
	public void toInteger() {
		Assert.assertNull(NumberUtil.toInteger(null));
		Assert.assertNull(NumberUtil.toInteger(""));
		Assert.assertEquals(2, (int) NumberUtil.toInteger("2"));
	}

	@Test
	public void toLong() {
		Assert.assertEquals(0L, NumberUtil.toLong((Long) null));
		Assert.assertEquals(1L, NumberUtil.toLong(new Long(1)));

		Assert.assertEquals(0L, NumberUtil.toLong((Double) null));
		Assert.assertEquals(1L, NumberUtil.toLong(new Double(1.1)));

		Assert.assertEquals(1L, NumberUtil.toLong((Double) null, 1));
		Assert.assertEquals(1L, NumberUtil.toLong(new Double(1.1), 1));
	}

	@Test
	public void zeroToNull() {
		Assert.assertNull(NumberUtil.zeroToNull(null));
		Assert.assertNull(NumberUtil.zeroToNull(0));
		Assert.assertEquals(1, (int) NumberUtil.zeroToNull(1));
	}

	@Test
	public void toZero() {
		Assert.assertEquals(1, NumberUtil.toZero(1, 2));
		Assert.assertEquals(1, NumberUtil.toZero(1, 1));
		Assert.assertEquals(0, NumberUtil.toZero(2, 1));
	}

	@Test
	public void isGreaterZero() {
		Assert.assertFalse(NumberUtil.isGreaterZero((Long) null));
		Assert.assertTrue(NumberUtil.isGreaterZero(new Long(1)));
		Assert.assertFalse(NumberUtil.isGreaterZero(new Long(0)));
		Assert.assertFalse(NumberUtil.isGreaterZero((Double) null));
		Assert.assertTrue(NumberUtil.isGreaterZero(new Double(1)));
		Assert.assertFalse(NumberUtil.isGreaterZero(new Double(0)));
	}

	@Test
	public void parseStatus() {
		Assert.assertEquals(1, NumberUtil.parseStatus(1, 1, true));
		Assert.assertEquals(0, NumberUtil.parseStatus(1, 1, false));
		Assert.assertEquals(3, NumberUtil.parseStatus(7, 4, false));
		Assert.assertEquals(7, NumberUtil.parseStatus(7, 4, true));
		int result = NumberUtil.parseStatus(7, 4, false);
		System.out.println("result:" + result);
	}

	@Test
	public void getPageStart() {
		Assert.assertEquals(0, NumberUtil.getPageStart(1, 10));
		Assert.assertEquals(10, NumberUtil.getPageStart(2, 10));
		try {
			NumberUtil.getPageStart(0, 10);
			Assert.fail("怎么没有抛异常?");
		}
		catch (IllegalArgumentException e) {

		}
		try {
			NumberUtil.getPageStart(1, 0);
			Assert.fail("怎么没有抛异常?");
		}
		catch (IllegalArgumentException e) {

		}
	}

	@Test
	public void perSecondAvg() {
		Assert.assertEquals(0, NumberUtil.perSecondAvg(10, 0));
		Assert.assertEquals(100, NumberUtil.perSecondAvg(100, 1000));
	}

	@Test
	public void percent() {
		Assert.assertEquals(90, NumberUtil.percent(90, 100));
	}

	@Test
	public void defaultInt() {
		Assert.assertEquals(1, NumberUtil.defaultInt(null, 1));
		Assert.assertEquals(2, NumberUtil.defaultInt(2, 1));
	}

	@Test
	public void isNotNull() {
		Assert.assertFalse(NumberUtil.isNotNull(null));
		Assert.assertTrue(NumberUtil.isNotNull(new Long(1)));
	}

	@Test
	public void NumberUtil() {
		new NumberUtil();
	}

	@Test
	public void random() {
		NumberUtil.random(10);
	}

}
